// 1. Get the authentication username and password from the header.
// 2. Free up the body to be able to carry payload for other method types.
// 3. Add more endpoints for books [GET, POST, PUT, PATCH, DELETE]. (These endpoint don't to do anything. but must return a response)
// 4. Add more endpoints for authors [GET, POST, PUT, PATCH, DELETE]. (These endpoint don't to do anything. but must return a response)

// NB. Whatever the response for each of this endpoints, is up to you to decide.

const http = require('http');

const hostname = 'localhost';
const port = 8900;

// Create server object that listens for incoming requests
const server = http.createServer((req, res) => {
  // Extract the request method (like 'GET' or 'POST') and URL
  const { method, url } = req;

  // Check method used in request
  switch (method) {
    case 'GET':
      if (url === '/books') {
        res.statusCode = 200; // Set status code to 'OK'
        res.setHeader('Content-Type', 'application/json'); // Specify response type as JSON
        res.end(JSON.stringify({ message: 'GET all books' })); // Send the message as JSON
      } else {
        // If URL is not knowwn, respond with 'Not Found'
        res.statusCode = 404; // Set status code to 'Not Found'
        res.setHeader('Content-Type', 'text/plain'); // Specify response type as plain text
        res.end('Not Found');
      }
      break;

    case 'POST':
      if (url === '/books') {
        res.statusCode = 201; // Set status code to 'Created'
        res.setHeader('Content-Type', 'application/json'); // Specify response type as JSON
        res.end(JSON.stringify({ message: 'POST new book' })); // Send the message as JSON
      } else {
        // If the URL is unknown, respond with 'Not Found'
        res.statusCode = 404; // Set status code to 'Not Found'
        res.setHeader('Content-Type', 'text/plain'); // Specify response type as plain text
        res.end('Not Found');
      }
      break;

    // For other request methods like 'PUT', 'PATCH', 'DELETE'
    default:
      // Respond with 'Method Not Allowed'
      res.statusCode = 405; // Set status code to 'Method Not Allowed'
      res.setHeader('Content-Type', 'text/plain'); // Specify response type as plain text
      res.end('Method Not Allowed'); // Send the 'Method Not Allowed' message
  }
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});
